package sequences;

import java.math.BigDecimal;
import java.math.BigInteger;

public class FibonacciBinet {

	public static void main(String[] args) {
		for (int i = 1; i < 5; i++) {
			System.out.println(i + " " + binet(i));
		}
		for (int i = 1; i < 72; i++) {
			System.out.println(i + " " + binet1(i));
		}
		for (int i = 1; i < 148; i++) {
			System.out.println(i + " " + binet2(i));
		}
	}

	/**
	 * @see http://apod.nasa.gov/htmltest/gifcity/sqrt5.1mil
	 */
	public static String SQRT5 = "2.2360679774997896964091736687312762354406183596115257242708972454105209256378";
//	"04899414414408378782274969508176150773783504253267724447073863586360121533452708" + 
//	"86677817319187916581127664532263985658053576135041753378500342339241406444208643" + 
//	"25390972525926272288762995174024406816117759089094984923713907297288984820886415" + 
//	"42689894099131693577019748678884425089754132956183176921499977424801530434115035" +
//	"95766833251249881517813940800056242085524354223555610630634282023409333198293395" +
//	"97463522712013417496142026359047378855043896870611356600457571399565955669569175" +
//	"64578221952500060539231234005009286764875529722056766253666074485853505262330678" +
//	"49463342224231763727702663240768010444331582573350589309813622634319868647194698" +
//	"99701808189524264459620345221411922329125981963258111041704958070481204034559949" + 
//	"43506855551855572512388641655010262436312571024449618789424682903404474716115455" +
//	"72320173767659046091852957560357798439805415538077906439363972302875606299948221" +
//	"38521773485924535151210463455550407072278724215347787529112121211843317893351910" +
//	"38008011118179004590618846249647104244248308880129406811314695953279447898998931" +
//	"69157746079246180750067987712420484738050277360829155991396244891494356068346252" +
//	"90644083279446426808889897460463083535378750420613747576068834018790881925591179" +
//	"73574464190248537871146194090191913688035110397638436041281058110378698951852014" +
//	"69704564202176389289088444637782638589379244004602887540539846015606170522361509" +
//	"03857754100421936849872542718503752155576933167230047782698666624462106784642724" +
//	"86385274578213410067985645305271124180595972849455195451310172309750871496529436" +
//	"28290254001204778032415546448998870617799819003360656224388640963928775351726629" +
//	"59714382279563079561495230154442350165389172786409130419793971113562821393674576" +
//	"81174922067562108887818873671671627622623379877111539509682982890683018259081401" +
//	"00389550972326150845283458789360734639611723667836657198260792144028911900899558" +
//	"42415224957129183232167411899757201394037881977280152887234186683454183828673002" +
//	"74315320229607628612524761028642346963020111802691220236015810127628430541861717" +
//	"61857514069010156162909176398126722596559628234906785462416185794558444265961285" +
//	"89375648549748034901108135575141664746219518302355259568865694958163530361955745" +
//	"36832235265007722422582873668753404700742232661451739766517420672644476219618024" +
//	"22039798353682983502466268030546768767446900186957209958589198316440251620919646";

	/**
	 * Doesn't actually give the correct results.
	 */
	public static BigInteger binet(int n) {
		BigDecimal sqrt5 = new BigDecimal(SQRT5);
		return (((new BigDecimal(1).add(sqrt5).pow(n))
				.subtract(new BigDecimal(1).subtract(sqrt5).pow(n)))
				.divide(new BigDecimal(2).pow(n).multiply(sqrt5))).toBigInteger();
	}
	
	/**
	 * Uses BigDecimal and BigInteger
	 * incorrect starting at Fib(148) due to Karp's 32-digit limit
	 */
	public static BigInteger binet1(int n) {
		BigDecimal sqrt5 = karp(new BigDecimal(5));
		return (((new BigDecimal(1).add(sqrt5).pow(n))
				.subtract(new BigDecimal(1).subtract(sqrt5).pow(n)))
				.divide(new BigDecimal(2).pow(n).multiply(sqrt5))).toBigInteger();
	}
	
	/**
	 * Starts to have wrong values at Fib(72)
	 */
	public static long binet2(int n) {
		double sqrt5 = Math.sqrt(5);
		return (long) ((Math.pow((1 + sqrt5), n) - Math.pow((1 - sqrt5), n)) / (Math.pow(2, n) * sqrt5));
	}
	
	/**
	 * 32 digits precision
	 * @see http://stackoverflow.com/a/16859436/2256169
	 */
	public static BigDecimal karp(BigDecimal n) {
	    BigDecimal x = new BigDecimal(Math.sqrt(n.doubleValue()));
	    return x.add(new BigDecimal(n.subtract(x.multiply(x)).doubleValue() / (x.doubleValue() * 2.0)));
	}
}
